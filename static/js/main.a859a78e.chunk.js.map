{"version":3,"sources":["Component/StyledTableRow.tsx","Component/LocationRow.tsx","Component/SortableTableCell.tsx","tools/Compare.tsx","tools/Sort.tsx","tools/Constants.tsx","tools/Filter.tsx","Component/LocationTable.tsx","data/getLocationsOfInterest.tsx","Component/LocationsFilter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledTableRow","withStyles","_","createStyles","root","backgroundColor","TableRow","LocationRow","props","state","location","TableCell","target","rel","href","encodeURIComponent","this","address","title","whatToDo","locationName","streetAddress","suburb","city","postCode","dayAsString","times","updatedAsString","PureComponent","SortableTableCell","sortProperty","sortBy","sortAsc","text","currentSort","cellProps","icon","sortproperty","Compare","numbers","a","b","asc","result","dates","strings","localeCompare","Sort","locations","sort","defaultSort","Constants","locale","filterByDate","date","from","to","Filter","locationsOfInterest","search","clonedSearch","updatedFrom","Date","undefined","updatedTo","dayTo","dayFrom","toLocaleLowerCase","setDate","getDate","setMinutes","getMinutes","prepare","filter","indexOf","filterByText","filterBySuburb","updated","day","LocationTable","useState","currentData","setData","setSort","setSortAsc","sortData","e","newSort","currentTarget","getAttribute","sorted","filtered","length","onCountChange","Table","stickyHeader","TableHead","onClick","TableBody","map","id","url","getLocationsOfInterest","i","fetch","then","response","json","data","element","join","LocationsFilter","TextField","label","variant","style","flex","onChange","setTextSearch","value","InputLabelProps","shrink","type","setDaySearch","setDateSearch","Autocomplete","options","suburbs","display","renderInput","params","setSuburbSearch","App","textSearch","setSearch","resultCount","setResultCount","setLocationsOfInterest","setSuburbs","useEffect","x","index","self","startsWith","fetchData","timeOutId","setTimeout","s","clearTimeout","Fragment","CssBaseline","property","newDate","newSearch","FormControl","textAlign","InputLabel","count","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a859a78e.chunk.js","sourcesContent":["import { createStyles, TableRow, Theme, withStyles } from \"@material-ui/core\";\r\n\r\nconst StyledTableRow = withStyles((_: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: \"white\",\r\n      },\r\n      \"&:nth-of-type(even)\": {\r\n        backgroundColor: \"cornsilk\",\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nexport default StyledTableRow;\r\n","import { TableCell } from \"@material-ui/core\";\r\nimport { PureComponent } from \"react\";\r\nimport ILocation from \"../types/ILocation\";\r\nimport StyledTableRow from \"./StyledTableRow\";\r\nimport MapIcon from \"@material-ui/icons/Map\";\r\n\r\ninterface LocationRowProps {\r\n  location: ILocation;\r\n}\r\n\r\ninterface LocationRowState {\r\n  location: ILocation;\r\n}\r\n\r\nclass LocationRow extends PureComponent<LocationRowProps, LocationRowState> {\r\n  constructor(props: LocationRowProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      location: {\r\n        ...props.location,\r\n      },\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <StyledTableRow>\r\n        <TableCell>\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            href={\r\n              \"https://duckduckgo.com/?ia=web&iaxm=maps&q=\" +\r\n              encodeURIComponent(this.state.location.address)\r\n            }\r\n          >\r\n            <MapIcon></MapIcon>\r\n          </a>\r\n        </TableCell>\r\n        <TableCell>\r\n          <span title={this.state.location.whatToDo}>\r\n            {this.state.location.locationName}\r\n          </span>\r\n        </TableCell>\r\n        <TableCell>{this.state.location.streetAddress}</TableCell>\r\n        <TableCell>{this.state.location.suburb}</TableCell>\r\n        <TableCell>{this.state.location.city}</TableCell>\r\n        <TableCell>{this.state.location.postCode}</TableCell>\r\n        <TableCell>{this.state.location.dayAsString}</TableCell>\r\n        <TableCell>{this.state.location.times}</TableCell>\r\n        <TableCell>{this.state.location.updatedAsString}</TableCell>\r\n      </StyledTableRow>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocationRow;\r\n","import { TableCell, TableCellProps } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\r\n\r\nexport interface SortableTableCellProps extends TableCellProps {\r\n  sortproperty: string;\r\n  text?: string;\r\n  currentSort: { sortBy: string; sortAsc: boolean };\r\n}\r\n\r\nfunction getIcon(\r\n  sortProperty: string,\r\n  sortBy: string,\r\n  sortAsc: boolean\r\n): JSX.Element {\r\n  if (sortProperty !== sortBy) {\r\n    return <ImportExportIcon />;\r\n  }\r\n\r\n  if (sortAsc) {\r\n    return <ArrowUpwardIcon />;\r\n  } else {\r\n    return <ArrowDownwardIcon />;\r\n  }\r\n}\r\n\r\nfunction SortableTableCell(props: SortableTableCellProps) {\r\n  const { text, currentSort, ...cellProps } = props;\r\n  const icon: JSX.Element = getIcon(\r\n    props.sortproperty,\r\n    currentSort.sortBy,\r\n    currentSort.sortAsc\r\n  );\r\n\r\n  return (\r\n    <TableCell {...cellProps}>\r\n      {text} {icon}\r\n    </TableCell>\r\n  );\r\n}\r\n\r\nexport default SortableTableCell;\r\n","function compareStrings(a: string, b: string, asc: boolean): number {\r\n  if (!a || a === \"\") {\r\n    return 1;\r\n  }\r\n\r\n  let result = (a || \"\").localeCompare(b || \"\");\r\n\r\n  if (!asc) {\r\n    result *= -1;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction compareNumbers(a: number, b: number, asc: boolean): number {\r\n  let result = a - b;\r\n\r\n  if (!asc) {\r\n    result *= -1;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction compareDates(a: Date, b: Date, asc: boolean): number {\r\n  let result = a > b ? 1 : -1;\r\n\r\n  if (!asc) {\r\n    result *= -1;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst Compare = {\r\n  numbers: compareNumbers,\r\n  dates: compareDates,\r\n  strings: compareStrings,\r\n};\r\n\r\nexport default Compare;\r\n","import ILocation from \"../types/ILocation\";\r\nimport Compare from \"./Compare\";\r\n\r\nfunction SortLocations(\r\n  locations: ILocation[],\r\n  asc: boolean,\r\n  sortProperty: string\r\n): ILocation[] {\r\n  if (sortProperty === \"id\") {\r\n    locations.sort((a: ILocation, b: ILocation) =>\r\n      Compare.numbers(a[sortProperty], b[sortProperty], asc)\r\n    );\r\n  } else if (sortProperty === \"day\" || sortProperty === \"updated\") {\r\n    locations.sort((a: ILocation, b: ILocation) =>\r\n      Compare.dates(a[sortProperty], b[sortProperty], asc)\r\n    );\r\n  } else {\r\n    locations.sort((a: ILocation, b: ILocation) =>\r\n      Compare.strings(a[sortProperty] as string, b[sortProperty] as string, asc)\r\n    );\r\n  }\r\n  return [...locations];\r\n}\r\n\r\nconst Sort = {\r\n  locations: SortLocations,\r\n  defaultSort: \"id\",\r\n};\r\n\r\nexport default Sort;\r\n","\r\nconst Constants = {\r\n  locale: 'en-NZ'\r\n};\r\n\r\nexport default Constants;\r\n","import ILocation from \"../types/ILocation\";\r\nimport ISearch from \"../types/ISearch\";\r\nimport Constants from \"./Constants\";\r\n\r\nfunction filterByText(location: ILocation, text: string) {\r\n  if (!text) {\r\n    return true;\r\n  }\r\n  return location.search.indexOf(text) !== -1;\r\n}\r\n\r\nfunction filterBySuburb(location: ILocation, suburb: string) {\r\n  if (!suburb) {\r\n    return true;\r\n  }\r\n  if (!location.suburb) {\r\n    return false;\r\n  }\r\n  return location.suburb.toLocaleLowerCase(Constants.locale) === suburb;\r\n}\r\n\r\nfunction filterByDate(date: Date, from?: Date, to?: Date) {\r\n  if (from && to) {\r\n    return date >= from && date < to;\r\n  }\r\n\r\n  if (from) {\r\n    return date >= from;\r\n  }\r\n\r\n  if (to) {\r\n    return date < to;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction prepare(search: ISearch): ISearch {\r\n  const result: ISearch = {\r\n    text: search.text,\r\n    suburb: search.suburb,\r\n    updatedFrom: search.updatedFrom ? new Date(search.updatedFrom) : undefined,\r\n    updatedTo: search.updatedTo ? new Date(search.updatedTo) : undefined,\r\n    dayTo: search.dayTo ? new Date(search.dayTo) : undefined,\r\n    dayFrom: search.dayFrom ? new Date(search.dayFrom) : undefined,\r\n  };\r\n\r\n  result.text = result.text.toLocaleLowerCase(Constants.locale);\r\n  result.suburb = result.suburb.toLocaleLowerCase(Constants.locale);\r\n\r\n  if (result.updatedFrom) {\r\n    result.updatedTo = new Date(result.updatedFrom);\r\n    result.updatedTo.setDate(result.updatedTo.getDate() + 1);\r\n    result.updatedTo.setMinutes(result.updatedTo.getMinutes() - 1);\r\n  }\r\n\r\n  if (result.dayTo) {\r\n    result.dayTo.setDate(result.dayTo.getDate() + 1);\r\n    result.dayTo.setMinutes(result.dayTo.getMinutes() - 1);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction filterList(\r\n  locationsOfInterest: ILocation[],\r\n  search: ISearch\r\n): ILocation[] {\r\n  if (!search) {\r\n    return locationsOfInterest;\r\n  }\r\n\r\n  const clonedSearch = prepare(search);\r\n\r\n  return locationsOfInterest.filter(\r\n    (location) =>\r\n      filterByText(location, clonedSearch.text) &&\r\n      filterBySuburb(location, clonedSearch.suburb) &&\r\n      filterByDate(\r\n        location.updated,\r\n        clonedSearch.updatedFrom,\r\n        clonedSearch.updatedTo\r\n      ) &&\r\n      filterByDate(location.day, clonedSearch.dayFrom, clonedSearch.dayTo)\r\n  );\r\n}\r\n\r\nconst Filter = {\r\n  locations: filterList,\r\n};\r\n\r\nexport default Filter;\r\n","import {\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n} from \"@material-ui/core\";\r\nimport LocationRow from \"./LocationRow\";\r\nimport ILocation from \"../types/ILocation\";\r\nimport React, { useState } from \"react\";\r\nimport SortableTableCell from \"./SortableTableCell\";\r\nimport Sort from \"../tools/Sort\";\r\nimport ILocationTableProps from \"../types/ILocationTableProps\";\r\nimport Filter from \"../tools/Filter\";\r\n\r\nfunction LocationTable(props: ILocationTableProps) {\r\n  const [currentData, setData] = useState(props.locations);\r\n  const [sortBy, setSort] = useState(Sort.defaultSort);\r\n  const [sortAsc, setSortAsc] = useState(true);\r\n\r\n  const sortData = (e: React.MouseEvent) => {\r\n    const sortProperty: string =\r\n      e.currentTarget.getAttribute(\"sortproperty\") || Sort.defaultSort;\r\n\r\n    let newSort: boolean;\r\n    if (sortBy === sortProperty) {\r\n      newSort = !sortAsc;\r\n    } else {\r\n      newSort = true;\r\n    }\r\n\r\n    const sorted: ILocation[] = Sort.locations(\r\n      currentData,\r\n      newSort,\r\n      sortProperty\r\n    );\r\n\r\n    setSort(sortProperty);\r\n    setSortAsc(newSort);\r\n    setData(sorted);\r\n  };\r\n\r\n  let filtered = Filter.locations(props.locations, props.search);\r\n\r\n  if (filtered.length !== currentData.length) {\r\n    filtered = Sort.locations(filtered, sortAsc, sortBy);\r\n    setData([...filtered]);\r\n    props.onCountChange(filtered.length);\r\n  }\r\n\r\n  return (\r\n    <Table stickyHeader={true}>\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell>Maps</TableCell>\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"locationName\"\r\n            text=\"Location Name\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"streetAddress\"\r\n            text=\"Street address\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"suburb\"\r\n            text=\"Suburb\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"city\"\r\n            text=\"City\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"postCode\"\r\n            text=\"Post code\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"day\"\r\n            text=\"Day\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <TableCell>Times</TableCell>\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"updated\"\r\n            text=\"Updated\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {currentData.map((location: ILocation) => (\r\n          <LocationRow key={location.id} location={location} />\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default LocationTable;\r\n","import Constants from \"../tools/Constants\";\r\nimport ILocation from \"../types/ILocation\";\r\n\r\nconst url: string =\r\n  \"https://raw.githubusercontent.com/JulianScap/locations-of-interest/main/json/locations-of-interest.json\";\r\n\r\nexport async function getLocationsOfInterest(): Promise<ILocation[]> {\r\n  let i = 1;\r\n\r\n  const locations = await fetch(url)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.map((element: any) => {\r\n        let result: ILocation = {\r\n          ...element,\r\n          day: new Date(element.day),\r\n          updated: new Date(element.updated),\r\n          id: i++,\r\n        };\r\n\r\n        result.search = [\r\n          result.city,\r\n          result.locationName,\r\n          result.postCode,\r\n          result.streetAddress,\r\n          result.suburb,\r\n        ]\r\n          .join(\"\\n\")\r\n          .toLocaleLowerCase(Constants.locale);\r\n\r\n        return result;\r\n      });\r\n    });\r\n\r\n  return locations || [];\r\n}\r\n","import { TextField } from \"@material-ui/core\";\r\nimport { Autocomplete, AutocompleteRenderInputParams } from \"@material-ui/lab\";\r\n\r\ninterface ILocationsFilterProps {\r\n  suburbs: string[];\r\n\r\n  setTextSearch: (text: string) => void;\r\n  setSuburbSearch: (suburb: string | null) => void;\r\n  setDaySearch: (dayAsText: string, property: string) => void;\r\n  setDateSearch: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nfunction LocationsFilter(props: ILocationsFilterProps) {\r\n  return (\r\n    <>\r\n      <TextField\r\n        label=\"Search\"\r\n        variant=\"outlined\"\r\n        style={{ flex: 1 }}\r\n        onChange={(e) => props.setTextSearch(e.currentTarget.value)}\r\n      />\r\n      &nbsp;\r\n      <TextField\r\n        InputLabelProps={{ shrink: true }}\r\n        label=\"Day from\"\r\n        variant=\"outlined\"\r\n        type=\"Date\"\r\n        style={{ flex: 1 }}\r\n        onChange={(e) => props.setDaySearch(e.currentTarget.value, \"dayFrom\")}\r\n      />\r\n      &nbsp;\r\n      <TextField\r\n        InputLabelProps={{ shrink: true }}\r\n        label=\"Day to\"\r\n        variant=\"outlined\"\r\n        type=\"Date\"\r\n        style={{ flex: 1 }}\r\n        onChange={(e) => props.setDaySearch(e.currentTarget.value, \"dayTo\")}\r\n      />\r\n      &nbsp;\r\n      <TextField\r\n        InputLabelProps={{ shrink: true }}\r\n        label=\"Updated date\"\r\n        variant=\"outlined\"\r\n        type=\"Date\"\r\n        style={{ flex: 1 }}\r\n        onChange={props.setDateSearch}\r\n      />\r\n      &nbsp;\r\n      <Autocomplete\r\n        options={props.suburbs}\r\n        style={{ flex: 1, display: \"inline-block\" }}\r\n        renderInput={(params: AutocompleteRenderInputParams) => (\r\n          <TextField {...params} label=\"Suburb\" variant=\"outlined\" />\r\n        )}\r\n        onChange={(_, value: string | null) => {\r\n          props.setSuburbSearch(value);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LocationsFilter;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport LocationTable from \"./Component/LocationTable\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport ISearch from \"./types/ISearch\";\r\nimport ILocation from \"./types/ILocation\";\r\nimport { getLocationsOfInterest } from \"./data/getLocationsOfInterest\";\r\nimport LocationsFilter from \"./Component/LocationsFilter\";\r\nimport { FormControl } from \"@material-ui/core\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport { InputLabel } from \"@material-ui/core\";\r\n\r\nfunction App() {\r\n  const [textSearch, setTextSearch] = useState(\"\");\r\n  const [search, setSearch] = useState<ISearch>({ text: \"\", suburb: \"\" });\r\n  const [resultCount, setResultCount] = useState(0);\r\n\r\n  const [locationsOfInterest, setLocationsOfInterest] = useState<ILocation[]>(\r\n    []\r\n  );\r\n\r\n  const [suburbs, setSuburbs] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await getLocationsOfInterest();\r\n      setSuburbs(\r\n        response\r\n          .map((x) => x.suburb)\r\n          .filter(\r\n            (value, index, self) =>\r\n              !!value &&\r\n              self.indexOf(value) === index &&\r\n              !value.startsWith(\"RD\")\r\n          )\r\n          .sort()\r\n      );\r\n      setLocationsOfInterest(response);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const timeOutId = setTimeout(() => {\r\n      setSearch((s) => ({ ...s, text: textSearch }));\r\n    }, 500);\r\n    return () => clearTimeout(timeOutId);\r\n  }, [textSearch]);\r\n\r\n  const setDateSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let newDate: Date | undefined;\r\n\r\n    if (e.currentTarget.value) {\r\n      newDate = new Date(e.currentTarget.value);\r\n    }\r\n\r\n    setSearch({ ...search, updatedTo: undefined, updatedFrom: newDate });\r\n  };\r\n\r\n  const setDaySearch = (value: string, property: string) => {\r\n    let newDate: Date | undefined;\r\n\r\n    if (value) {\r\n      newDate = new Date(value);\r\n    }\r\n\r\n    const newSearch = { ...search, [property]: newDate };\r\n    setSearch(newSearch);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <br />\r\n      <div style={{ display: \"flex\" }}>\r\n        <LocationsFilter\r\n          suburbs={suburbs}\r\n          setTextSearch={setTextSearch}\r\n          setSuburbSearch={(value) =>\r\n            setSearch((s) => ({ ...s, suburb: value || \"\" }))\r\n          }\r\n          setDaySearch={setDaySearch}\r\n          setDateSearch={setDateSearch}\r\n        />\r\n        &nbsp;\r\n        <FormControl style={{ flex: 1, textAlign: \"right\" }}>\r\n          <InputLabel>{\"Count: \" + resultCount}</InputLabel>\r\n        </FormControl>\r\n        &nbsp;\r\n        <a\r\n          href=\"https://github.com/JulianScap/locations-of-interest\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          <GitHubIcon />\r\n        </a>\r\n      </div>\r\n      <LocationTable\r\n        search={search}\r\n        locations={locationsOfInterest}\r\n        onCountChange={(count: number) => {\r\n          setResultCount(count);\r\n        }}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}