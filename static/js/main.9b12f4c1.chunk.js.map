{"version":3,"sources":["Component/StyledTableRow.tsx","Component/LocationRow.tsx","Component/SortableTableCell.tsx","tools/Constants.tsx","data/getLocationsOfInterest.tsx","tools/Compare.tsx","tools/Sort.tsx","tools/Filter.tsx","Component/LocationTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledTableRow","withStyles","_","createStyles","root","backgroundColor","TableRow","LocationRow","props","state","location","TableCell","target","rel","href","encodeURIComponent","this","address","title","whatToDo","locationName","streetAddress","suburb","city","postCode","dayAsString","times","updatedAsString","PureComponent","SortableTableCell","sortProperty","sortBy","sortAsc","icon","sortproperty","currentSort","text","Constants","locale","url","getLocationsOfInterest","a","i","fetch","then","response","json","data","map","element","result","day","Date","updated","id","search","join","toLocaleLowerCase","locations","Compare","numbers","b","asc","dates","strings","localeCompare","Sort","sort","defaultSort","Filter","locationsOfInterest","filter","indexOf","filterOne","LocationTable","useState","setLocationsOfInterest","useEffect","fetchData","currentData","setData","setSort","setSortAsc","sortData","e","newSort","currentTarget","getAttribute","sorted","filtered","length","Table","stickyHeader","TableHead","onClick","TableBody","App","setSearch","finishedSearch","setDisplayMessage","timeOutId","setTimeout","clearTimeout","Fragment","CssBaseline","Input","placeholder","onChange","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b12f4c1.chunk.js","sourcesContent":["import { createStyles, TableRow, Theme, withStyles } from \"@material-ui/core\";\r\n\r\nconst StyledTableRow = withStyles((_: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: \"white\",\r\n      },\r\n      \"&:nth-of-type(even)\": {\r\n        backgroundColor: \"grey\",\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nexport default StyledTableRow;\r\n","import { TableCell } from \"@material-ui/core\";\r\nimport { PureComponent } from \"react\";\r\nimport ILocation from \"../types/ILocation\";\r\nimport StyledTableRow from \"./StyledTableRow\";\r\nimport MapIcon from \"@material-ui/icons/Map\";\r\n\r\ninterface LocationRowProps {\r\n  location: ILocation;\r\n}\r\n\r\ninterface LocationRowState {\r\n  location: ILocation;\r\n}\r\n\r\nclass LocationRow extends PureComponent<LocationRowProps, LocationRowState> {\r\n  constructor(props: LocationRowProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      location: {\r\n        ...props.location,\r\n      },\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <StyledTableRow>\r\n        <TableCell>\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            href={\r\n              \"https://duckduckgo.com/?ia=web&iaxm=maps&q=\" +\r\n              encodeURIComponent(this.state.location.address)\r\n            }\r\n          >\r\n            <MapIcon></MapIcon>\r\n          </a>\r\n        </TableCell>\r\n        <TableCell>\r\n          <span title={this.state.location.whatToDo}>\r\n            {this.state.location.locationName}\r\n          </span>\r\n        </TableCell>\r\n        <TableCell>{this.state.location.streetAddress}</TableCell>\r\n        <TableCell>{this.state.location.suburb}</TableCell>\r\n        <TableCell>{this.state.location.city}</TableCell>\r\n        <TableCell>{this.state.location.postCode}</TableCell>\r\n        <TableCell>{this.state.location.dayAsString}</TableCell>\r\n        <TableCell>{this.state.location.times}</TableCell>\r\n        <TableCell>{this.state.location.updatedAsString}</TableCell>\r\n      </StyledTableRow>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocationRow;\r\n","import { TableCell, TableCellProps } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\r\n\r\nexport interface SortableTableCellProps extends TableCellProps {\r\n  sortproperty: string;\r\n  text?: string;\r\n  currentSort: { sortBy: string; sortAsc: boolean };\r\n}\r\n\r\nfunction getIcon(\r\n  sortProperty: string,\r\n  sortBy: string,\r\n  sortAsc: boolean\r\n): JSX.Element {\r\n  if (sortProperty !== sortBy) {\r\n    return <ImportExportIcon />;\r\n  }\r\n\r\n  if (sortAsc) {\r\n    return <ArrowUpwardIcon />;\r\n  } else {\r\n    return <ArrowDownwardIcon />;\r\n  }\r\n}\r\n\r\nfunction SortableTableCell(props: SortableTableCellProps) {\r\n  const icon: JSX.Element = getIcon(\r\n    props.sortproperty,\r\n    props.currentSort.sortBy,\r\n    props.currentSort.sortAsc\r\n  );\r\n\r\n  return (\r\n    <TableCell {...props}>\r\n      {props.text} {icon}\r\n    </TableCell>\r\n  );\r\n}\r\n\r\nexport default SortableTableCell;\r\n","\r\nconst Constants = {\r\n  locale: 'en-NZ'\r\n};\r\n\r\nexport default Constants;\r\n","import Constants from \"../tools/Constants\";\r\nimport ILocation from \"../types/ILocation\";\r\n\r\nconst url: string =\r\n  \"https://raw.githubusercontent.com/JulianScap/locations-of-interest/main/json/locations-of-interest.json\";\r\n\r\nexport async function getLocationsOfInterest(): Promise<ILocation[]> {\r\n  let i = 1;\r\n\r\n  const locations = await fetch(url)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.map((element: any) => {\r\n        let result: ILocation = {\r\n          ...element,\r\n          day: new Date(element.day),\r\n          updated: new Date(element.updated),\r\n          id: i++,\r\n        };\r\n\r\n        result.search = [\r\n          result.city,\r\n          result.locationName,\r\n          result.postCode,\r\n          result.streetAddress,\r\n          result.suburb,\r\n        ]\r\n          .join(\"\\n\")\r\n          .toLocaleLowerCase(Constants.locale);\r\n\r\n        return result;\r\n      });\r\n    });\r\n\r\n  return locations || [];\r\n}\r\n","function compareStrings(a: string, b: string, asc: boolean): number {\r\n  if (!a || a === \"\") {\r\n    return 1;\r\n  }\r\n\r\n  let result = (a || \"\").localeCompare(b || \"\");\r\n\r\n  if (!asc) {\r\n    result *= -1;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction compareNumbers(a: number, b: number, asc: boolean): number {\r\n  let result = a - b;\r\n\r\n  if (!asc) {\r\n    result *= -1;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction compareDates(a: Date, b: Date, asc: boolean): number {\r\n  let result = a > b ? 1 : -1;\r\n\r\n  if (!asc) {\r\n    result *= -1;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst Compare = {\r\n  numbers: compareNumbers,\r\n  dates: compareDates,\r\n  strings: compareStrings,\r\n};\r\n\r\nexport default Compare;\r\n","import ILocation from \"../types/ILocation\";\r\nimport Compare from \"./Compare\";\r\n\r\nfunction SortLocations(\r\n  locations: ILocation[],\r\n  asc: boolean,\r\n  sortProperty: string\r\n): ILocation[] {\r\n  if (sortProperty === \"id\") {\r\n    locations.sort((a: ILocation, b: ILocation) =>\r\n      Compare.numbers(a[sortProperty], b[sortProperty], asc)\r\n    );\r\n  } else if (sortProperty === \"day\" || sortProperty === \"updated\") {\r\n    locations.sort((a: ILocation, b: ILocation) =>\r\n      Compare.dates(a[sortProperty], b[sortProperty], asc)\r\n    );\r\n  } else {\r\n    locations.sort((a: ILocation, b: ILocation) =>\r\n      Compare.strings(a[sortProperty] as string, b[sortProperty] as string, asc)\r\n    );\r\n  }\r\n  return [...locations];\r\n}\r\n\r\nconst Sort = {\r\n  locations: SortLocations,\r\n  defaultSort: \"id\",\r\n};\r\n\r\nexport default Sort;\r\n","import ILocation from \"../types/ILocation\";\r\nimport Constants from \"./Constants\";\r\n\r\nfunction filterOne(location: ILocation, search: string) {\r\n  if (!search) {\r\n    return true;\r\n  }\r\n  return location.search.indexOf(search) !== -1;\r\n}\r\n\r\nfunction filterList(\r\n  locationsOfInterest: ILocation[],\r\n  search: string\r\n): ILocation[] {\r\n  if (!search) {\r\n    return locationsOfInterest;\r\n  }\r\n\r\n  search = search.toLocaleLowerCase(Constants.locale);\r\n\r\n  return locationsOfInterest.filter((location) => filterOne(location, search));\r\n}\r\n\r\nconst Filter = {\r\n  locations: filterList,\r\n};\r\n\r\nexport default Filter;\r\n","import {\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n} from \"@material-ui/core\";\r\nimport LocationRow from \"./LocationRow\";\r\nimport ILocation from \"../types/ILocation\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport SortableTableCell from \"./SortableTableCell\";\r\nimport { getLocationsOfInterest } from \"../data/getLocationsOfInterest\";\r\nimport Sort from \"../tools/Sort\";\r\nimport ISearchable from \"../types/ISearchable\";\r\nimport Filter from \"../tools/Filter\";\r\n\r\nfunction LocationTable(props: ISearchable) {\r\n  const [locationsOfInterest, setLocationsOfInterest] = useState<ILocation[]>(\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await getLocationsOfInterest();\r\n      setLocationsOfInterest(response);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const [currentData, setData] = useState(locationsOfInterest);\r\n  const [sortBy, setSort] = useState(Sort.defaultSort);\r\n  const [sortAsc, setSortAsc] = useState(true);\r\n\r\n  const sortData = (e: React.MouseEvent) => {\r\n    const sortProperty: string =\r\n      e.currentTarget.getAttribute(\"sortproperty\") || Sort.defaultSort;\r\n\r\n    let newSort: boolean;\r\n    if (sortBy === sortProperty) {\r\n      newSort = !sortAsc;\r\n    } else {\r\n      newSort = true;\r\n    }\r\n\r\n    const sorted: ILocation[] = Sort.locations(\r\n      currentData,\r\n      newSort,\r\n      sortProperty\r\n    );\r\n\r\n    setSort(sortProperty);\r\n    setSortAsc(newSort);\r\n    setData(sorted);\r\n  };\r\n\r\n  const filtered = Filter.locations(locationsOfInterest, props.search);\r\n\r\n  if (filtered.length !== currentData.length) {\r\n    setData([...filtered]);\r\n  }\r\n\r\n  return (\r\n    <Table stickyHeader={true}>\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell>Maps</TableCell>\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"locationName\"\r\n            text=\"Location Name\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"streetAddress\"\r\n            text=\"Street address\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"suburb\"\r\n            text=\"Suburb\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"city\"\r\n            text=\"City\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"postCode\"\r\n            text=\"Post code\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"day\"\r\n            text=\"Day\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n          <TableCell>Times</TableCell>\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"updated\"\r\n            text=\"Updated\"\r\n            currentSort={{ sortBy: sortBy, sortAsc: sortAsc }}\r\n          />\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {currentData.map((location: ILocation) => (\r\n          <LocationRow key={location.id} location={location} />\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default LocationTable;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport LocationTable from \"./Component/LocationTable\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { Input } from \"@material-ui/core\";\r\n\r\nfunction App() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [finishedSearch, setDisplayMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const timeOutId = setTimeout(() => setDisplayMessage(search), 500);\r\n    return () => clearTimeout(timeOutId);\r\n  }, [search]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Input\r\n        placeholder=\"Search...\"\r\n        onChange={(e) => setSearch(e.currentTarget.value)}\r\n      />\r\n      <LocationTable search={finishedSearch} />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}