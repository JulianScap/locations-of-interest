{"version":3,"sources":["app/hooks.tsx","tools/Constants.tsx","tools/Filter.tsx","tools/Compare.tsx","tools/Sort.tsx","features/locations-of-interest/locationsAPI.tsx","features/locations-of-interest/locationsSlice.tsx","features/locations-of-interest/LocationsFilter.tsx","Component/StyledTableRow.tsx","features/locations-of-interest/LocationRow.tsx","Component/SortableTableCell.tsx","features/locations-of-interest/LocationTable.tsx","features/locations-of-interest/Location.tsx","App.tsx","reportWebVitals.ts","app/store.tsx","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","Constants","locale","filterByDate","date","from","to","Filter","locations","locationsOfInterest","search","clonedSearch","result","text","suburb","updatedFrom","undefined","updatedTo","dayTo","dayFrom","toLocaleLowerCase","Date","setDate","getDate","setMinutes","getMinutes","getTime","prepare","filter","location","indexOf","filterByText","filterBySuburb","updated","day","Compare","numbers","a","b","asc","strings","localeCompare","locationsGlobal","Sort","sort","sortProperty","property","defaultSort","url","status","getLocationsOfInterest","i","fetch","then","response","json","data","map","element","id","city","locationName","postCode","streetAddress","join","fetchLocationsAsync","createAsyncThunk","filterAndSort","state","console","log","JSON","stringify","filtered","allLocations","value","newDate","locationsSlice","createSlice","name","initialState","visibleLocations","suburbs","reducers","setAllLocations","action","payload","x","index","self","startsWith","applySuburb","filterDayFrom","filterDayTo","filterUpdatedDate","filterText","applySort","newSort","newProperty","extraReducers","builder","addCase","fulfilled","actions","selectSort","selectVisibleLocations","selectSuburbs","LocationsFilter","dispatch","useState","setSearch","useEffect","timeOutId","setTimeout","clearTimeout","TextField","label","variant","style","flex","onChange","e","currentTarget","InputLabelProps","shrink","type","Autocomplete","options","display","renderInput","params","_","StyledTableRow","withStyles","createStyles","root","backgroundColor","TableRow","LocationRow","props","TableCell","target","rel","href","encodeURIComponent","this","address","title","whatToDo","dayAsString","times","updatedAsString","PureComponent","SortableTableCell","sortBy","sortAsc","currentSort","cellProps","icon","sortproperty","LocationTable","sortData","getAttribute","Table","stickyHeader","TableHead","onClick","TableBody","Location","FormControl","textAlign","InputLabel","length","App","Fragment","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","locationsReducer","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.a74115de.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","\r\nconst Constants = {\r\n  locale: 'en-NZ'\r\n};\r\n\r\nexport default Constants;\r\n","import ILocation from \"../types/ILocation\";\r\nimport ISearch from \"../types/ISearch\";\r\nimport Constants from \"./Constants\";\r\n\r\nfunction filterByText(location: ILocation, text: string) {\r\n  if (!text) {\r\n    return true;\r\n  }\r\n  return location.search.indexOf(text) !== -1;\r\n}\r\n\r\nfunction filterBySuburb(location: ILocation, suburb: string) {\r\n  if (!suburb) {\r\n    return true;\r\n  }\r\n  if (!location.suburb) {\r\n    return false;\r\n  }\r\n  return location.suburb.toLocaleLowerCase(Constants.locale) === suburb;\r\n}\r\n\r\nfunction filterByDate(date: number, from?: number, to?: number) {\r\n  if (from && to) {\r\n    return date >= from && date < to;\r\n  }\r\n\r\n  if (from) {\r\n    return date >= from;\r\n  }\r\n\r\n  if (to) {\r\n    return date < to;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction prepare(search: ISearch): ISearch {\r\n  const result: ISearch = {\r\n    text: search.text,\r\n    suburb: search.suburb,\r\n    updatedFrom: search.updatedFrom ? search.updatedFrom : undefined,\r\n    updatedTo: search.updatedTo ? search.updatedTo : undefined,\r\n    dayTo: search.dayTo ? search.dayTo : undefined,\r\n    dayFrom: search.dayFrom ? search.dayFrom : undefined,\r\n  };\r\n\r\n  result.text = result.text.toLocaleLowerCase(Constants.locale);\r\n  result.suburb = result.suburb.toLocaleLowerCase(Constants.locale);\r\n\r\n  if (result.updatedFrom) {\r\n    let updatedTo: Date = new Date(result.updatedFrom);\r\n    updatedTo.setDate(updatedTo.getDate() + 1);\r\n    updatedTo.setMinutes(updatedTo.getMinutes() - 1);\r\n    result.updatedTo = updatedTo.getTime();\r\n  }\r\n\r\n  if (result.dayTo) {\r\n    let dayTo: Date = new Date(result.dayTo);\r\n    dayTo.setDate(dayTo.getDate() + 1);\r\n    dayTo.setMinutes(dayTo.getMinutes() - 1);\r\n    result.dayTo = dayTo.getTime();\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction filterList(\r\n  locationsOfInterest: ILocation[],\r\n  search: ISearch\r\n): ILocation[] {\r\n  if (!search) {\r\n    return locationsOfInterest;\r\n  }\r\n\r\n  const clonedSearch = prepare(search);\r\n\r\n  return locationsOfInterest.filter(\r\n    (location) =>\r\n      filterByText(location, clonedSearch.text) &&\r\n      filterBySuburb(location, clonedSearch.suburb) &&\r\n      filterByDate(\r\n        location.updated,\r\n        clonedSearch.updatedFrom,\r\n        clonedSearch.updatedTo\r\n      ) &&\r\n      filterByDate(location.day, clonedSearch.dayFrom, clonedSearch.dayTo)\r\n  );\r\n}\r\n\r\nconst Filter = {\r\n  locations: filterList,\r\n};\r\n\r\nexport default Filter;\r\n","function compareStrings(a: string, b: string, asc: boolean): number {\r\n  if (!a || a === \"\") {\r\n    return 1;\r\n  }\r\n\r\n  let result = (a || \"\").localeCompare(b || \"\");\r\n\r\n  if (!asc) {\r\n    result *= -1;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction compareNumbers(a: number, b: number, asc: boolean): number {\r\n  let result = a - b;\r\n\r\n  if (!asc) {\r\n    result *= -1;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst Compare = {\r\n  numbers: compareNumbers,\r\n  strings: compareStrings,\r\n};\r\n\r\nexport default Compare;\r\n","import ILocation from \"../types/ILocation\";\r\nimport ISort from \"../types/ISort\";\r\nimport Compare from \"./Compare\";\r\n\r\nfunction sortLocations(locations: ILocation[], sort: ISort): ILocation[] {\r\n  const sortProperty: string = sort.property;\r\n  if (sortProperty === \"id\" || sortProperty === \"day\" || sortProperty === \"updated\") {\r\n    locations.sort((a: ILocation, b: ILocation) =>\r\n      Compare.numbers(a[sortProperty], b[sortProperty], sort.asc)\r\n    );\r\n  } else {\r\n    locations.sort((a: ILocation, b: ILocation) =>\r\n      Compare.strings(\r\n        a[sortProperty] as string,\r\n        b[sortProperty] as string,\r\n        sort.asc\r\n      )\r\n    );\r\n  }\r\n\r\n  return [...locations];\r\n}\r\n\r\nconst Sort = {\r\n  locations: sortLocations,\r\n  defaultSort: \"id\",\r\n};\r\n\r\nexport default Sort;\r\n","import Constants from \"../../tools/Constants\";\r\nimport ILocation from \"../../types/ILocation\";\r\n\r\nconst url: string =\r\n  \"https://raw.githubusercontent.com/JulianScap/locations-of-interest/main/json/locations-of-interest.json\";\r\n\r\nlet locationsGlobal: ILocation[] | undefined;\r\nlet status: \"idle\" | \"busy\" | \"ready\" = \"idle\";\r\n\r\nexport async function getLocationsOfInterest(): Promise<ILocation[]> {\r\n  if (locationsGlobal || status === \"busy\" || status === \"ready\") {\r\n    return locationsGlobal || [];\r\n  }\r\n  status = \"busy\";\r\n\r\n  let i = 1;\r\n\r\n  const locations = await fetch(url)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.map((element: any) => {\r\n        let result: ILocation = {\r\n          ...element,\r\n          day: new Date(element.day).getTime(),\r\n          updated: new Date(element.updated).getTime(),\r\n          id: i++,\r\n        };\r\n\r\n        result.search = [\r\n          result.city,\r\n          result.locationName,\r\n          result.postCode,\r\n          result.streetAddress,\r\n          result.suburb,\r\n        ]\r\n          .join(\"\\n\")\r\n          .toLocaleLowerCase(Constants.locale);\r\n\r\n        return result;\r\n      });\r\n    });\r\n\r\n  locationsGlobal = locations;\r\n  status = \"ready\";\r\n  return locations || [];\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/store\";\r\nimport Filter from \"../../tools/Filter\";\r\nimport Sort from \"../../tools/Sort\";\r\nimport ILocation from \"../../types/ILocation\";\r\nimport ISearch from \"../../types/ISearch\";\r\nimport ISort from \"../../types/ISort\";\r\nimport { getLocationsOfInterest } from \"./locationsAPI\";\r\n\r\nexport interface ILocationsState {\r\n  sort: ISort;\r\n  allLocations: ILocation[];\r\n  visibleLocations: ILocation[];\r\n  suburbs: string[];\r\n  search: ISearch;\r\n}\r\n\r\nconst initialState: ILocationsState = {\r\n  allLocations: [],\r\n  visibleLocations: [],\r\n  suburbs: [],\r\n  search: {\r\n    suburb: \"\",\r\n    text: \"\",\r\n  },\r\n  sort: {\r\n    property: \"id\",\r\n    asc: true,\r\n  },\r\n};\r\n\r\nexport const fetchLocationsAsync = createAsyncThunk(\r\n  \"locations-of-interest/setAllLocations\",\r\n  async () => {\r\n    return await getLocationsOfInterest();\r\n  }\r\n);\r\n\r\nconst filterAndSort = (state: ILocationsState): ILocation[] => {\r\n  console.log(\"Filtering\", JSON.stringify(state.search), JSON.stringify(state.sort));\r\n  const filtered = Filter.locations(state.allLocations, state.search);\r\n  const sorted = Sort.locations(filtered, state.sort);\r\n  return sorted;\r\n};\r\n\r\nconst getDate = (value: string | null): number | undefined => {\r\n  let newDate: number | undefined;\r\n\r\n  if (value) {\r\n    newDate = new Date(value).getTime();\r\n  }\r\n\r\n  return newDate;\r\n};\r\n\r\nexport const locationsSlice = createSlice({\r\n  name: \"locations-of-interest\",\r\n  initialState,\r\n  reducers: {\r\n    setAllLocations: (state, action: PayloadAction<ILocation[]>) => {\r\n      state.allLocations = action.payload;\r\n      state.suburbs = state.allLocations\r\n        .map((x) => x.suburb)\r\n        .filter(\r\n          (value, index, self) =>\r\n            !!value && self.indexOf(value) === index && !value.startsWith(\"RD\")\r\n        )\r\n        .sort();\r\n      state.visibleLocations = filterAndSort(state);\r\n    },\r\n    applySuburb: (state, action: PayloadAction<string>) => {\r\n      state.search.suburb = action.payload;\r\n      state.visibleLocations = filterAndSort(state);\r\n    },\r\n    filterDayFrom: (state, action: PayloadAction<string>) => {\r\n      state.search.dayFrom = getDate(action.payload);\r\n      state.visibleLocations = filterAndSort(state);\r\n    },\r\n    filterDayTo: (state, action: PayloadAction<string>) => {\r\n      state.search.dayTo = getDate(action.payload);\r\n      state.visibleLocations = filterAndSort(state);\r\n    },\r\n    filterUpdatedDate: (state, action: PayloadAction<string>) => {\r\n      state.search.updatedFrom = getDate(action.payload);\r\n      state.visibleLocations = filterAndSort(state);\r\n    },\r\n    filterText: (state, action: PayloadAction<string>) => {\r\n      state.search.text = action.payload;\r\n      state.visibleLocations = filterAndSort(state);\r\n    },\r\n    applySort: (state, action: PayloadAction<string>) => {\r\n      let newProperty = action.payload;\r\n      let newSort: boolean;\r\n      if (state.sort.property === newProperty) {\r\n        newSort = !state.sort.asc;\r\n      } else {\r\n        newSort = true;\r\n      }\r\n\r\n      state.sort = {\r\n        asc: newSort,\r\n        property: newProperty,\r\n      };\r\n\r\n      state.visibleLocations = Sort.locations(\r\n        state.visibleLocations,\r\n        state.sort\r\n      );\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchLocationsAsync.fulfilled, (state, action) => {\r\n      state.visibleLocations = state.allLocations = action.payload;\r\n      state.suburbs = state.allLocations\r\n        .map((x) => x.suburb)\r\n        .filter(\r\n          (value, index, self) =>\r\n            !!value && self.indexOf(value) === index && !value.startsWith(\"RD\")\r\n        )\r\n        .sort();\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  applySuburb,\r\n  applySort,\r\n  filterUpdatedDate,\r\n  filterDayTo,\r\n  filterDayFrom,\r\n  filterText,\r\n} = locationsSlice.actions;\r\n\r\nexport const selectSort = (state: RootState) => state.locations.sort;\r\nexport const selectVisibleLocations = (state: RootState) =>\r\n  state.locations.visibleLocations;\r\nexport const selectSuburbs = (state: RootState) => state.locations.suburbs;\r\n\r\nexport default locationsSlice.reducer;\r\n","import { TextField } from \"@material-ui/core\";\r\nimport { Autocomplete, AutocompleteRenderInputParams } from \"@material-ui/lab\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  applySuburb,\r\n  filterDayFrom,\r\n  filterDayTo,\r\n  filterUpdatedDate,\r\n  selectSuburbs,\r\n  filterText,\r\n} from \"./locationsSlice\";\r\n\r\nfunction LocationsFilter() {\r\n  const suburbs = useAppSelector(selectSuburbs);\r\n  const dispatch = useAppDispatch();\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const timeOutId = setTimeout(() => {\r\n      dispatch(filterText(search));\r\n    }, 500);\r\n    return () => clearTimeout(timeOutId);\r\n  }, [search, dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <TextField\r\n        label=\"Search\"\r\n        variant=\"outlined\"\r\n        style={{ flex: 1 }}\r\n        onChange={(e) => setSearch(e.currentTarget.value)}\r\n      />\r\n      &nbsp;\r\n      <TextField\r\n        InputLabelProps={{ shrink: true }}\r\n        label=\"Day from\"\r\n        variant=\"outlined\"\r\n        type=\"Date\"\r\n        style={{ flex: 1 }}\r\n        onChange={(e) => dispatch(filterDayFrom(e.currentTarget.value))}\r\n      />\r\n      &nbsp;\r\n      <TextField\r\n        InputLabelProps={{ shrink: true }}\r\n        label=\"Day to\"\r\n        variant=\"outlined\"\r\n        type=\"Date\"\r\n        style={{ flex: 1 }}\r\n        onChange={(e) => dispatch(filterDayTo(e.currentTarget.value))}\r\n      />\r\n      &nbsp;\r\n      <TextField\r\n        InputLabelProps={{ shrink: true }}\r\n        label=\"Updated date\"\r\n        variant=\"outlined\"\r\n        type=\"Date\"\r\n        style={{ flex: 1 }}\r\n        onChange={(e) => dispatch(filterUpdatedDate(e.currentTarget.value))}\r\n      />\r\n      &nbsp;\r\n      <Autocomplete\r\n        options={suburbs}\r\n        style={{ flex: 1, display: \"inline-block\" }}\r\n        renderInput={(params: AutocompleteRenderInputParams) => (\r\n          <TextField {...params} label=\"Suburb\" variant=\"outlined\" />\r\n        )}\r\n        onChange={(_, value: string | null) => {\r\n          dispatch(applySuburb(value || \"\"));\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LocationsFilter;\r\n","import { createStyles, TableRow, Theme, withStyles } from \"@material-ui/core\";\r\n\r\nconst StyledTableRow = withStyles((_: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: \"white\",\r\n      },\r\n      \"&:nth-of-type(even)\": {\r\n        backgroundColor: \"cornsilk\",\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nexport default StyledTableRow;\r\n","import { TableCell } from \"@material-ui/core\";\r\nimport { PureComponent } from \"react\";\r\nimport ILocation from \"../../types/ILocation\";\r\nimport StyledTableRow from \"../../Component/StyledTableRow\";\r\nimport MapIcon from \"@material-ui/icons/Map\";\r\n\r\ninterface LocationRowProps {\r\n  location: ILocation;\r\n}\r\n\r\ninterface LocationRowState {\r\n  location: ILocation;\r\n}\r\n\r\nclass LocationRow extends PureComponent<LocationRowProps, LocationRowState> {\r\n  constructor(props: LocationRowProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      location: {\r\n        ...props.location,\r\n      },\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <StyledTableRow>\r\n        <TableCell>\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            href={\r\n              \"https://duckduckgo.com/?ia=web&iaxm=maps&q=\" +\r\n              encodeURIComponent(this.state.location.address)\r\n            }\r\n          >\r\n            <MapIcon></MapIcon>\r\n          </a>\r\n        </TableCell>\r\n        <TableCell>\r\n          <span title={this.state.location.whatToDo}>\r\n            {this.state.location.locationName}\r\n          </span>\r\n        </TableCell>\r\n        <TableCell>{this.state.location.streetAddress}</TableCell>\r\n        <TableCell>{this.state.location.suburb}</TableCell>\r\n        <TableCell>{this.state.location.city}</TableCell>\r\n        <TableCell>{this.state.location.postCode}</TableCell>\r\n        <TableCell>{this.state.location.dayAsString}</TableCell>\r\n        <TableCell>{this.state.location.times}</TableCell>\r\n        <TableCell>{this.state.location.updatedAsString}</TableCell>\r\n      </StyledTableRow>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocationRow;\r\n","import { TableCell, TableCellProps } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\r\nimport ISort from \"../types/ISort\";\r\n\r\nexport interface SortableTableCellProps extends TableCellProps {\r\n  sortproperty: string;\r\n  text?: string;\r\n  currentSort: ISort;\r\n}\r\n\r\nfunction getIcon(\r\n  sortProperty: string,\r\n  sortBy: string,\r\n  sortAsc: boolean\r\n): JSX.Element {\r\n  if (sortProperty !== sortBy) {\r\n    return <ImportExportIcon />;\r\n  }\r\n\r\n  if (sortAsc) {\r\n    return <ArrowUpwardIcon />;\r\n  } else {\r\n    return <ArrowDownwardIcon />;\r\n  }\r\n}\r\n\r\nfunction SortableTableCell(props: SortableTableCellProps) {\r\n  const { text, currentSort, ...cellProps } = props;\r\n  const icon: JSX.Element = getIcon(\r\n    props.sortproperty,\r\n    currentSort.property,\r\n    currentSort.asc\r\n  );\r\n\r\n  return (\r\n    <TableCell {...cellProps}>\r\n      {text} {icon}\r\n    </TableCell>\r\n  );\r\n}\r\n\r\nexport default SortableTableCell;\r\n","import {\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n} from \"@material-ui/core\";\r\nimport LocationRow from \"./LocationRow\";\r\nimport ILocation from \"../../types/ILocation\";\r\nimport React from \"react\";\r\nimport SortableTableCell from \"../../Component/SortableTableCell\";\r\nimport Sort from \"../../tools/Sort\";\r\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\r\nimport { applySort, selectSort, selectVisibleLocations } from \"./locationsSlice\";\r\n\r\nfunction LocationTable() {\r\n  const dispatch = useAppDispatch();\r\n  const sort = useAppSelector(selectSort);\r\n  const locations = useAppSelector(selectVisibleLocations);\r\n\r\n  const sortData = (e: React.MouseEvent) => {\r\n    const sortProperty: string | null =\r\n      e.currentTarget.getAttribute(\"sortproperty\") || Sort.defaultSort;\r\n\r\n    dispatch(applySort(sortProperty));\r\n  };\r\n\r\n  return (\r\n    <Table stickyHeader={true}>\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell>Maps</TableCell>\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"locationName\"\r\n            text=\"Location Name\"\r\n            currentSort={sort}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"streetAddress\"\r\n            text=\"Street address\"\r\n            currentSort={sort}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"suburb\"\r\n            text=\"Suburb\"\r\n            currentSort={sort}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"city\"\r\n            text=\"City\"\r\n            currentSort={sort}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"postCode\"\r\n            text=\"Post code\"\r\n            currentSort={sort}\r\n          />\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"day\"\r\n            text=\"Day\"\r\n            currentSort={sort}\r\n          />\r\n          <TableCell>Times</TableCell>\r\n          <SortableTableCell\r\n            onClick={sortData}\r\n            sortproperty=\"updated\"\r\n            text=\"Updated\"\r\n            currentSort={sort}\r\n          />\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {(locations || []).map((location: ILocation) => (\r\n          <LocationRow key={location.id} location={location} />\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default LocationTable;\r\n","import { FormControl, InputLabel } from \"@material-ui/core\";\r\nimport LocationsFilter from \"./LocationsFilter\";\r\nimport LocationTable from \"./LocationTable\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport { fetchLocationsAsync, selectVisibleLocations } from \"./locationsSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction Location() {\r\n  const locations = useAppSelector(selectVisibleLocations);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const timeOutId = setTimeout(() => {\r\n      dispatch(fetchLocationsAsync());\r\n    }, 500);\r\n    return () => clearTimeout(timeOutId);\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <div style={{ display: \"flex\" }}>\r\n        <LocationsFilter />\r\n        &nbsp;\r\n        <FormControl style={{ flex: 1, textAlign: \"right\" }}>\r\n          <InputLabel>{\"Count: \" + locations.length}</InputLabel>\r\n        </FormControl>\r\n        &nbsp;\r\n        <a\r\n          href=\"https://github.com/JulianScap/locations-of-interest\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          <GitHubIcon />\r\n        </a>\r\n      </div>\r\n      <LocationTable />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport Location from \"./features/locations-of-interest/Location\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <br />\r\n      <Location />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport locationsReducer from '../features/locations-of-interest/locationsSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    locations: locationsReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./app/store\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CssBaseline />\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}